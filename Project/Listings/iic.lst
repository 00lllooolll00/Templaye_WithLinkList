C51 COMPILER V9.60.7.0   IIC                                                               04/06/2025 01:40:29 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE IIC
OBJECT MODULE PLACED IN .\Objects\iic.obj
COMPILER INVOKED BY: D:\Keli5\C51\BIN\C51.EXE ..\Driver\Src\iic.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\User\Inc;..\Driver\
                    -Inc;.\SYS) DEBUG OBJECTEXTEND PRINT(.\Listings\iic.lst) OBJECT(.\Objects\iic.obj)

line level    source

   1          #include "iic.h"
   2          
   3          #define DELAY_TIME 10
   4          
   5          //
   6          static void I2C_Delay(unsigned char n)
   7          {
   8   1          do
   9   1          {
  10   2              _nop_();
  11   2              _nop_();
  12   2              _nop_();
  13   2              _nop_();
  14   2              _nop_();
  15   2              _nop_();
  16   2              _nop_();
  17   2              _nop_();
  18   2              _nop_();
  19   2              _nop_();
  20   2              _nop_();
  21   2              _nop_();
  22   2              _nop_();
  23   2              _nop_();
  24   2              _nop_();
  25   2          } while (n--);
  26   1      }
  27          
  28          //
  29          void I2CStart(void)
  30          {
  31   1          sda = 1;
  32   1          scl = 1;
  33   1          I2C_Delay(DELAY_TIME);
  34   1          sda = 0;
  35   1          I2C_Delay(DELAY_TIME);
  36   1          scl = 0;
  37   1      }
  38          
  39          //
  40          void I2CStop(void)
  41          {
  42   1          sda = 0;
  43   1          scl = 1;
  44   1          I2C_Delay(DELAY_TIME);
  45   1          sda = 1;
  46   1          I2C_Delay(DELAY_TIME);
  47   1      }
  48          
  49          //
  50          void I2CSendByte(unsigned char byt)
  51          {
  52   1          unsigned char i;
  53   1      
  54   1          for (i = 0; i < 8; i++)
C51 COMPILER V9.60.7.0   IIC                                                               04/06/2025 01:40:29 PAGE 2   

  55   1          {
  56   2              scl = 0;
  57   2              I2C_Delay(DELAY_TIME);
  58   2              if (byt & 0x80)
  59   2              {
  60   3                  sda = 1;
  61   3              }
  62   2              else
  63   2              {
  64   3                  sda = 0;
  65   3              }
  66   2              I2C_Delay(DELAY_TIME);
  67   2              scl = 1;
  68   2              byt <<= 1;
  69   2              I2C_Delay(DELAY_TIME);
  70   2          }
  71   1      
  72   1          scl = 0;
  73   1      }
  74          
  75          //
  76          unsigned char I2CReceiveByte(void)
  77          {
  78   1          unsigned char da;
  79   1          unsigned char i;
  80   1          for (i = 0; i < 8; i++)
  81   1          {
  82   2              scl = 1;
  83   2              I2C_Delay(DELAY_TIME);
  84   2              da <<= 1;
  85   2              if (sda) da |= 0x01;
  86   2              scl = 0;
  87   2              I2C_Delay(DELAY_TIME);
  88   2          }
  89   1          return da;
  90   1      }
  91          
  92          //
  93          unsigned char I2CWaitAck(void)
  94          {
  95   1          unsigned char ackbit;
  96   1      
  97   1          scl = 1;
  98   1          I2C_Delay(DELAY_TIME);
  99   1          ackbit = sda;
 100   1          scl = 0;
 101   1          I2C_Delay(DELAY_TIME);
 102   1      
 103   1          return ackbit;
 104   1      }
 105          
 106          //
 107          void I2CSendAck(unsigned char ackbit)
 108          {
 109   1          scl = 0;
 110   1          sda = ackbit;
 111   1          I2C_Delay(DELAY_TIME);
 112   1          scl = 1;
 113   1          I2C_Delay(DELAY_TIME);
 114   1          scl = 0;
 115   1          sda = 1;
 116   1          I2C_Delay(DELAY_TIME);
C51 COMPILER V9.60.7.0   IIC                                                               04/06/2025 01:40:29 PAGE 3   

 117   1      }
 118          
 119          /**
 120           * @brief 从PCF8591读取AD转换的结果
 121           * 
 122           * @param addr 要读取的地址的位置
 123           * @return uint8_t 返回读取到的转换值
 124           * @note 如果题目要求读取两个AD转换的的值，需要将两个值的值的位置交换
 125           *       因为本次读到的值是上一次转换完成的值。
 126           */
 127          uint8_t AD_Read(uint8_t addr)
 128          {
 129   1          uint8_t temp = 0x00;
 130   1      
 131   1          //第一阶段 写阶段（其实是告诉从机我要从哪个地址的寄存器读取数据）
 132   1          I2CStart(); //开启通讯
 133   1          I2CSendByte(ADDR_PCF8591 & 0xfe); //对PCF8591写数据
 134   1          I2CWaitAck(); //等待从机回应
 135   1          I2CSendByte(addr); //告诉从机要读取数据的地址
 136   1          I2CWaitAck(); //等待从机回应
 137   1      
 138   1          //第二阶段 读数据阶段
 139   1          I2CStart(); //开启通讯
 140   1          I2CSendByte(ADDR_PCF8591 | 0x01); //读PCF8591读数据
 141   1          I2CWaitAck(); //等待从机回应
 142   1          temp = I2CReceiveByte(); //从第一阶段输入的地址读取数据，存入temp
 143   1          I2CSendAck(1); //向从机发送1，告诉从机不再发送数据
 144   1          I2CStop(); //通讯结束
 145   1      
 146   1          return temp;
 147   1      }
 148          
 149          /**
 150           * @brief 数模转换从对应引脚输出模拟量
 151           * 
 152           * @param dat 输入对应的数字量
 153           */
 154          void DA_Write(uint8_t dat)
 155          {
 156   1          I2CStart(); //开启
 157   1          I2CSendByte(ADDR_PCF8591 & 0xfe); //选中地址 0x90 写模式
 158   1          I2CWaitAck(); //等待应答
 159   1          I2CSendByte(0x43); //发送0x4x：让模拟信号输出使能
 160   1          I2CWaitAck(); //等待应答
 161   1          I2CSendByte(dat); //写入转换量
 162   1          I2CWaitAck(); //等待应答
 163   1          I2CStop(); //结束
 164   1      }
 165          
 166          /**
 167           * @brief 向AT24C02中被指定的地址写入对应的数据
 168           * 
 169           * @param e2prom_string 待写入的数据
 170           * @param addr 要写入数据的地址（最好为8的倍数）
 171           * @param num 页数（单页最大值为8字节）
 172           */
 173          void E2prom_Write(uint8_t *e2prom_string, uint8_t addr, uint8_t num)
 174          {
 175   1          I2CStart(); //开启i2c通讯
 176   1          I2CSendByte(ADDR_AT24C02 & 0xfe); //选中at24c02芯片 写模式 0-写模式 1-读模式
 177   1          I2CWaitAck(); //等待从机应答
 178   1      
C51 COMPILER V9.60.7.0   IIC                                                               04/06/2025 01:40:29 PAGE 4   

 179   1          I2CSendByte(addr); //向at24c02写入数据  告知写入数据存放在at24c02芯片的地址
 180   1          I2CWaitAck(); //等待从机应答
 181   1      
 182   1          while (num--) //当前写入页数
 183   1          {
 184   2              I2CSendByte(*e2prom_string++); //向at24c02芯片addr地址中写入第一批数据
 185   2              I2CWaitAck(); //等待从机应答
 186   2              I2C_Delay(200); //延时
 187   2          }
 188   1      
 189   1          I2CStop(); //结束通讯
 190   1      }
 191          
 192          /**
 193           * @brief 从AT24C02的指定地址读取数据存储到数组中
 194           * 
 195           * @param e2prom_string 数据存储的数组
 196           * @param addr 地址（最好为8的倍数）
 197           * @param num 页数（单页最大值为8字节）
 198           */
 199          void E2prom_Read(uint8_t *e2prom_string, uint8_t addr, uint8_t num)
 200          {
 201   1          I2CStart(); //开启i2c通讯
 202   1          I2CSendByte(ADDR_AT24C02 & 0xfe); //选中at24c02芯片 写模式 a：1010为at24c02地址 0-写模式
             - 1-读模式
 203   1          I2CWaitAck(); //等待从机应答
 204   1      
 205   1          I2CSendByte(addr); //向at24c02写入数据  告知写入数据存放在at24c02芯片的地址
 206   1          I2CWaitAck(); //等待从机应答
 207   1      
 208   1          I2CStart(); //开启i2c通讯
 209   1          I2CSendByte(ADDR_AT24C02 | 0x01); //选中at24c02芯片 读模式 a：1010为at24c02地址 0-写模式
             - 1-读模式
 210   1          I2CWaitAck(); //等待从机应答
 211   1      
 212   1          while (num--) //当前读取页数
 213   1          {
 214   2              *e2prom_string++ = I2CReceiveByte(); //将读取到的数据存入数组e2prom_string
 215   2              if (num) I2CSendAck(0); //num不等于0的话就发送应答
 216   2              else I2CSendAck(1); //num为0代表当前循环为最后一个循环 不需要再次发送应答
 217   2          }
 218   1      
 219   1          I2CStop(); //结束通讯
 220   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    362    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
