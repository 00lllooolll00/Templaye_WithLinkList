C51 COMPILER V9.60.7.0   TASK_APP                                                          04/06/2025 00:55:40 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TASK_APP
OBJECT MODULE PLACED IN .\Objects\Task_App.obj
COMPILER INVOKED BY: D:\Keli5\C51\BIN\C51.EXE ..\User\Src\Task_App.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\User\Inc;..\Driv
                    -er\Inc;.\SYS) DEBUG OBJECTEXTEND PRINT(.\Listings\Task_App.lst) OBJECT(.\Objects\Task_App.obj)

line level    source

   1          /**
   2           * @file Task_App.c
   3           * @author 九千九百九十九
   4           * @brief 此为任务的声明和建立，用于优化主函数的视觉，让其更加简介，当然如果你愿意。可以将这些都写在main.c
             -中
   5           * @version 0.2
   6           * @date 2025-03-31
   7           * 
   8           * @copyright Copyright (c) 2025
   9           * 
  10           */
  11          #include "Task_App.h"
  12          
  13          /*Global Variables*/
  14          uint8_t pdata ucRTC[3] = {23, 59, 50}; //时间储存 时、分、秒
  15          float temperature; //温度
  16          uint8_t pdata RxData[5]; //串口接收到的的数据
  17          uint16_t Serial_Idle_Cnt; //串口空闲计时器
  18          uint8_t index; //指示当前接收到数据的索引
  19          uint8_t Adval1; //AD转换值
  20          uint8_t Adval2; //AD转换值
  21          uint8_t Distance; //距离
  22          uint16_t Freq = 0; //NE555频率
  23          
  24          /*Task1 Creation Key*/
  25          void Task_Key(void)
  26          {
  27   1          static uint8_t Key_Val;
  28   1          static uint8_t Key_Down;
  29   1          static uint8_t Key_Up;
  30   1          static uint8_t Key_Old = 0; //该值初始给0 避免警告
  31   1          static bit Test_Flag = 0;
  32   1      
  33   1          Key_Val = Key_Read();
  34   1          Key_Down = Key_Val & (Key_Val ^ Key_Old);
  35   1          Key_Up = ~Key_Val & (Key_Val ^ Key_Old);
  36   1          Key_Old = Key_Val;
  37   1      
  38   1          /*Test*/
  39   1      
  40   1          switch (Key_Down)
  41   1          {
  42   2              case 8:
  43   2                  Test_Flag ^= 1;
  44   2                  memset(Led_Buf, Test_Flag, 8);
  45   2                  break;
  46   2              case 4: // 上一级菜单
  47   2                  Menu_MoveParent();
  48   2                  break;
  49   2      
  50   2              case 5: //下一级菜单
  51   2                  Menu_MoveChild();
  52   2                  break;
  53   2      
C51 COMPILER V9.60.7.0   TASK_APP                                                          04/06/2025 00:55:40 PAGE 2   

  54   2              case 6: //同一级 下一个菜单
  55   2                  Menu_MoveNext();
  56   2                  break;
  57   2      
  58   2              case 7: //同一级 上一个菜单
  59   2                  Menu_MovePrev();
  60   2                  break;
  61   2          }
  62   1      }
  63          
  64          /*Task2 Creation Seg Led*/
  65          void Task_Disp(void)
  66          {
  67   1          uint8_t Scan = Mysystick % 8; //显示扫描变量 只在0――7周期变
  68   1      
  69   1          Seg_Disp(Scan, Seg_Buf[Scan], Seg_Point[Scan]); //数码管显示
  70   1          LED_Disp(Scan, Led_Buf[Scan]); //LED显示
  71   1      }
  72          
  73          /*Task3 Creation NE555*/
  74          void Task_NE555(void)
  75          {
  76   1          TR0 = 0; //关闭TIM0计数
  77   1          ET1 = 0; //关闭TIM1中断允许
  78   1          Freq = TH0 << 8 | TL0; //获取频率
  79   1          TH0 = TL0 = 0; //手动清空计数值
  80   1          ET1 = 1; //打开TIM1中断允许
  81   1          TR0 = 1; //开启TIM0计数
  82   1      }
  83          
  84          /*Task4 Creation Buzz Motor Relay*/
  85          void Task_Periph(void)
  86          {
  87   1          static bit Flag_Buzz = 0;
  88   1          static bit Flag_Relay = 1;
  89   1      
  90   1          Periph_Set(BUZZ, Flag_Buzz);
  91   1          Periph_Set(RELAY, Flag_Relay);
  92   1      
  93   1          //500ms翻转一次继电器和蜂鸣器的电平
  94   1          Flag_Buzz ^= 1;
  95   1          Flag_Relay ^= 1;
  96   1      }
  97          
  98          /*Task5 Creation DS1302*/
  99          void Task_RTC(void)
 100          {
 101   1          RTC_Read(ucRTC);
 102   1      }
 103          
 104          /*Task6 Creation DS18B20*/
 105          void Task_Ds18b20(void)
 106          {
 107   1          temperature = Read_temperature(); //获取温度
 108   1      }
 109          
 110          /*Task7 Creation Ultrasonic*/
 111          void Task_Ul(void)
 112          {
 113   1          Distance = Distance_Get(); //获取距离
 114   1      }
 115          
C51 COMPILER V9.60.7.0   TASK_APP                                                          04/06/2025 00:55:40 PAGE 3   

 116          /*Task8 Creation Serial*/
 117          void Task_Serial(void)
 118          {
 119   1          static uint8_t psc = 0; //分频器 每1s发送一次
 120   1      
 121   1          /*模拟串口发送数据 这里是1s打印一个数据*/
 122   1          if (++psc == 4)
 123   1          {
 124   2              psc = 0;
 125   2              printf("systime:%d\r\n", (uint16_t)(Mysystick / 1000));
 126   2          }
 127   1      
 128   1          if (Serial_Idle_Cnt > 300) //300ms没接受到数据就会解析一次 这里可以自行调整
 129   1          {
 130   2              /*串口解析操作*/
 131   2              if (RxData[0] == '1')
 132   2              {
 133   3                  static bit i = 0;
 134   3                  index = 0;
 135   3                  RxData[0] = 0;
 136   3                  memset(Led_Buf, i, 8);
 137   3                  i ^= 1;
 138   3              }
 139   2          }
 140   1      }
 141          
 142          /*Task9 Creation PCF8591*/
 143          void Task_PCF8591(void)
 144          {
 145   1          Adval1 = AD_Read(0x41); //电位器
 146   1          Adval2 = AD_Read(0x43); //光敏
 147   1      }
 148          
 149          void Task_Seg(void)
 150          {
 151   1          static menu_node_t *p = NULL; //存储上一次的节点 用于判断是否需要清空显存
 152   1          if (!p) p = current_menu; //第一次没有值 就赋值到current_menu
 153   1      
 154   1          if (p != current_menu) //如果更改了界面，则刷新一次显存
 155   1          {
 156   2              memset(Seg_Buf, 10, 8); // 清空显示缓冲区
 157   2              memset(Seg_Point, 0, 8); // 清除所有小数点
 158   2              p = current_menu;
 159   2          }
 160   1      
 161   1          Menu_Update();
 162   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    420    ----
   CONSTANT SIZE    =     13    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      8    ----
   DATA SIZE        =     20       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
